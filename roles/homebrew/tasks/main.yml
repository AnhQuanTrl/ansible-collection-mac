---
# tasks file for homebrew
- name: Set default homebrew users and groups if not specified
  set_fact:
    homebrew_user: "{{ homebrew_user | default(ansible_user_id) }}"
    homebrew_group: "{{ homebrew_group | default(ansible_user_gid) }}"

- name: Ensure Homebrew directory exists and has correct permissions.
  file:
    state: directory
    path: "{{ homebrew_prefix }}"
    owner: "{{ homebrew_user }}"
    group: "{{ homebrew_group }}"
    mode: "0775"
  become: true

- name: Check if homebrew already exists.
  stat:
    path: "{{ homebrew_brew_bin_path }}/brew"
  register: pre_installed_brew

- name: Ensure Homebrew is installed.
  git:
    repo: "{{ homebrew_repo }}"
    version: master
    dest: "{{ homebrew_prefix }}"
    update: false
    depth: 1
  become: true
  become_user: "{{ homebrew_user }}"
  when: not pre_installed_brew.stat.exists

- name: Ensure proper homebrew folders are in place.
  file:
    path: "{{ homebrew_prefix }}/{{ item }}"
    state: directory
    owner: "{{ homebrew_user }}"
    group: "{{ homebrew_group }}"
    mode: "0775"
  become: true
  loop: "{{ homebrew_folders }}"

- name: Ensure proper homebrew zsh folders are in place.
  file:
    path: "{{ homebrew_prefix }}/{{ item }}"
    state: directory
    owner: "{{ homebrew_user }}"
    group: "{{ homebrew_group }}"
    mode: "0755"
  become: true
  loop: "{{ homebrew_folders_user_only }}"

- name: Perform brew installation.
  become: "{{ (homebrew_user != ansible_user_id) | bool }}"
  become_user: "{{ homebrew_user }}"
  block:
    - name: Force update brew after installation.
      command: "{{ homebrew_brew_bin_path }}/brew update --force"
      when: not pre_installed_brew.stat.exists

    - name: Where is the cache?
      command: "{{ homebrew_brew_bin_path }}/brew --cache"
      register: homebrew_cache_path
      changed_when: false
      check_mode: false

    - name: Ensure configured taps are tapped.
      homebrew_tap:
        tap: "{{ item.name | default(item) }}"
        url: "{{ item.url | default(omit) }}"
        state: present
      loop: "{{ homebrew_taps }}"

    - name: Ensure blacklisted cask applications are not installed.
      homebrew_cask:
        name: "{{ item }}"
        state: absent
        sudo_password: "{{ ansible_become_password | default(omit) }}"
      loop: "{{ homebrew_cask_uninstalled_apps }}"

    - name: Install configured cask applications.
      homebrew_cask:
        name: "{{ item.name | default(item) }}"
        state: present
        install_options: "{{ item.install_options | default(omit) }}"
        accept_external_apps: false
        sudo_password: "{{ ansible_become_password | default(omit) }}"
      loop: "{{ homebrew_cask_apps }}"
      notify:
        - Clear homebrew cache

    - name: Ensure blacklisted homebrew packages are not installed.
      homebrew:
        name: "{{ item }}"
        state: absent
      loop: "{{ homebrew_uninstalled_packages }}"

    - name: Ensure configured homebrew packages are installed.
      homebrew:
        path: "{{ homebrew_brew_bin_path }}"
        name: "{{ item.name | default(item) }}"
        install_options: "{{ item.install_options | default(omit) }}"
        state: "{{ item.state | default('present') }}"
      loop: "{{ homebrew_installed_packages }}"
      notify:
        - Clear homebrew cache

    - name: Upgrade all homebrew packages (if configured).
      homebrew:
        update_homebrew: true
        upgrade_all: true
      notify:
        - Clear homebrew cache
